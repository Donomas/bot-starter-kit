import { StepScene } from "@puregram/scenes";
import { CallbackQueryContext, DocumentAttachment, InlineKeyboardBuilder } from "puregram";
import fetch from 'node-fetch';
import { bot } from "../src/app.js";
import { deleteMessage, sendMessage } from "../functions/commonFunctions.js";
/** –ü–µ—Ä–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ */
const customKeyboardFirst = new InlineKeyboardBuilder()
    .textButton({ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', payload: 'comeback' })
    .row()
    .textButton({ text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', payload: 'comebackMainScene' });
/** –í—Ç–æ—Ä–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ */
const customKeyboardSecond = new InlineKeyboardBuilder()
    .textButton({ text: 'üÜï –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É', payload: 'createData' })
    .row()
    .textButton({ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', payload: 'comeback' })
    .row()
    .textButton({ text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', payload: 'comebackMainScene' });
/** {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–ª–∞–π–¥–µ—Ä–µ —ç—Ç–æ–π —Å—Ü–µ–Ω—ã */
const page = 5;
/** {string[]} –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ */
const array = [
    '123',
    '321',
    '456',
    '654',
    '789',
    '987',
];
/**
 * @function callbackHandler
 * @param {CallbackQueryContext & StepContext<Record<string, any>>} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–ª–±–µ–∫-–∑–∞–ø—Ä–æ—Å–æ–≤.
 * @description –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
 */
const callbackHandler = async (context) => {
    if (context.scene.state.message_id !== context.message?.id) {
        return context.answerCallbackQuery({
            text: '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫....',
            show_alert: true
        });
    }
    const commandHandlers = {
        comebackMainScene: async () => context.scene.enter('–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞'),
        comebackStep: async (step) => context.scene.step.go(Number(step)),
        comeback: async () => context.scene.step.previous(),
        continue: async () => context.scene.step.next(),
        addData: async () => context.scene.step.go(1),
        next: async () => commandHandlers.sliderData(1),
        previous: async () => commandHandlers.sliderData(-1),
        sliderData: async (direction) => {
            const newChunk = context.scene.state.chunk + (page * direction);
            if (newChunk >= 0 && newChunk < array.length) {
                context.scene.state.chunk = newChunk;
            }
            else {
                await context.answerCallbackQuery({
                    text: '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫....',
                    show_alert: true
                });
            }
            return context.scene.step.go(context.scene.step.stepId);
        },
        createData: async () => {
            if (!context.scene.state.subscribers.length) {
                return context.answerCallbackQuery({
                    text: '‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                    show_alert: true
                });
            }
            let { name, subscribers } = context.scene.state;
            context.scene.state.subscribers = [];
            array.push(name);
            await context.answerCallbackQuery({
                text: '‚úÖ –≠–ª–µ–º–µ–Ω—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞.',
                show_alert: true
            });
            return context.scene.step.go(0);
        },
        checkData: async (name) => {
            if (!checkExistenceData(name)) {
                await context.answerCallbackQuery({
                    text: '‚ùå –ë–∞–∑—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
                    show_alert: true
                });
                return context.scene.step.go(context.scene.step.stepId);
            }
            context.scene.state.name = name;
            return context.scene.step.go(3);
        },
        deleteDataConfirm: async (name) => {
            if (!checkExistenceData(name)) {
                await context.answerCallbackQuery({
                    text: '‚ùå –ë–∞–∑—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
                    show_alert: true
                });
                return context.scene.step.go(0);
            }
            await context.answerCallbackQuery({
                text: '‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è',
                show_alert: false
            });
            return context.scene.step.go(4);
        },
        deleteData: async (name) => {
            if (!checkExistenceData(name)) {
                await context.answerCallbackQuery({
                    text: '‚ùå –ë–∞–∑—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
                    show_alert: true
                });
                return context.scene.step.go(0);
            }
            console.log(array.find(item => item === name));
            const index = array.findIndex(item => item === name);
            array.splice(index, 1);
            await context.answerCallbackQuery({
                text: 'üóë –í—ã —É–¥–∞–ª–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º: ' + name,
                show_alert: true
            });
            return context.scene.step.go(0);
        }
    };
    const pattern = /^(\w+):?(.+?)?$/i;
    const match = context.data?.match(pattern);
    if (match) {
        const [, command, parameters] = match;
        // —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const paramsArray = parameters ? parameters.split(",") : [];
        if (commandHandlers[command]) {
            // –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            return commandHandlers[command](...paramsArray);
        }
    }
    return context.answerCallbackQuery({
        text: '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫....',
        show_alert: true
    });
};
/**
 * @function checkExistenceData
 * @param {string} name - –ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞.
 * @returns {boolean} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.
 */
function checkExistenceData(name) {
    return array.some(item => item === name);
}
/**
 * @function generateTextSlider
 * @param {number} chunk - –ß–∞—Å—Ç—å —Å–ª–∞–π–¥–µ—Ä–∞.
 * @param {number} page - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
 * @returns {string} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∞–π–¥–µ—Ä–∞.
 */
function generateTextSlider(chunk, page) {
    let text = '\n';
    for (let i = chunk, a = 0; i < array.length && a < page; i++, a++) {
        const current = array[i];
        text += `${i + 1}. ${current}\n`;
    }
    return text;
}
/**
 * @function generateKeyboardSlider
 * @param {number} chunk - –ß–∞—Å—Ç—å —Å–ª–∞–π–¥–µ—Ä–∞.
 * @param {number} page - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
 * @returns {InlineKeyboardBuilder} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ª–∞–π–¥–µ—Ä–∞.
 */
function generateKeyboardSlider(chunk, page) {
    let keyboard = new InlineKeyboardBuilder();
    if (chunk > 0) {
        keyboard.textButton({ text: '‚óÄ', payload: 'previous' });
    }
    if (chunk + page < array.length) {
        keyboard.textButton({ text: '‚ñ∂', payload: 'next' });
    }
    for (let i = chunk, a = 0; i < array.length && a < page; i++, a++) {
        const current = array[i];
        keyboard
            .row()
            .textButton({ text: current, payload: 'checkData:' + current });
    }
    keyboard
        .row()
        .textButton({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É', payload: 'addData' })
        .row()
        .textButton({ text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', payload: 'comebackMainScene' });
    return keyboard;
}
/**
 * @function generateKeyboard
 * @param {string} name - –ò–º—è.
 * @returns {InlineKeyboardBuilder} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–Ω–æ–ø–∫–µ.
 */
function generateKeyboard(name) {
    let keyboard = new InlineKeyboardBuilder();
    keyboard
        .textButton({ text: 'üóë –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É', payload: 'deleteDataConfirm:' + name })
        .row()
        .textButton({ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', payload: 'comebackStep:0' })
        .row()
        .textButton({ text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', payload: 'comebackMainScene' });
    return keyboard;
}
/**
 * @function generateKeyboardConfirm
 * @param {string} name - –ò–º—è.
 * @returns {InlineKeyboardBuilder} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
 */
function generateKeyboardConfirm(name) {
    let keyboard = new InlineKeyboardBuilder();
    keyboard
        .textButton({ text: 'üóë –î–∞', payload: 'deleteData:' + name })
        .textButton({ text: 'üîô –ù–µ—Ç', payload: 'comebackStep:3' })
        .row()
        .textButton({ text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', payload: 'comebackMainScene' });
    return keyboard;
}
/**
 * @function removeDuplicates
 * @param {typeof array} objectArray - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.
 * @param {string[]} filterArray - –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
 * @returns {string[]} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ filterArray.
 */
function removeDuplicates(objectArray, filterArray) {
    let set1 = new Set();
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ set1
    objectArray.forEach(item => {
        set1.add(item);
    });
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ filterArray
    return filterArray.filter(item => !set1.has(item));
}
/**
 * –°—Ü–µ–Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞" –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–æ–º –¥–∞–Ω–Ω—ã—Ö.
 * –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–º–æ—â—å—é —Å–ª–∞–π–¥–µ—Ä–∞, –ø–æ–∑–≤–æ–ª—è—é—â–µ–≥–æ –ª–∏—Å—Ç–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
 * 2. –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞.
 * 3. –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞.
 * 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤.
 *
 * –≠—Ç–∞ —Å—Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö,
 * –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏.
 *
 * @exports secondScene
 * @type {StepScene}
 */
export const secondScene = new StepScene('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞', {
    steps: [
        /**
         * @description –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
         */
        async (context) => {
            context.scene.state.chunk = context.scene.state.chunk || 0;
            if (context.scene.step.firstTime) {
                const count = array.length;
                const currentPage = Math.trunc((context.scene.state.chunk + page) / page);
                const allPage = Math.ceil(array.length / page === 0 ? 1 : array.length / page);
                const text = `‚ÑπÔ∏è –ö–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:  ${count}
					üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞: [${currentPage}/${allPage}]\n` + generateTextSlider(context.scene.state.chunk, page);
                const keyboard = generateKeyboardSlider(context.scene.state.chunk, page);
                return sendMessage(context, text, keyboard);
            }
            if (context instanceof CallbackQueryContext) {
                return callbackHandler(context);
            }
            return context.send('–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é.');
        },
        /**
         * @description –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
         */
        async (context) => {
            const text = 'üî§ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞.\n‚ùóÔ∏è –ù–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤';
            if (context.scene.step.firstTime) {
                return sendMessage(context, text, customKeyboardFirst);
            }
            if (context instanceof CallbackQueryContext) {
                return callbackHandler(context);
            }
            if (!context.text) {
                return context.send('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.');
            }
            if (context.text.length > 10) {
                return context.send('–ú–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤....');
            }
            if (array.some(item => item === context.text)) {
                return context.send('—ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –°–£–©–ï–°–¢–í–£–ï–¢!');
            }
            context.scene.state.name = context.text;
            await deleteMessage(context);
            return context.scene.step.next();
        },
        /**
         * @description –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Ö –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
         */
        async (context) => {
            context.scene.state.subscribers = context.scene.state.subscribers || [];
            const text = `üî§ –ò–º—è —ç–ª–µ–º–µ–Ω—Ç–∞: ${context.scene.state.name}.\nüë• –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${context.scene.state.subscribers.length}\n\n‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.`;
            if (context.scene.step.firstTime) {
                return sendMessage(context, text, customKeyboardSecond);
            }
            if (context instanceof CallbackQueryContext) {
                return callbackHandler(context);
            }
            if (!context.hasAttachments('document')) {
                return context.send('–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.');
            }
            if (!context.isMediaGroup) {
                return false;
            }
            let documents = [];
            if (context.mediaGroup) {
                documents = context.mediaGroup.attachments.filter(item => item instanceof DocumentAttachment && item.mimeType?.includes('text/plain'));
            }
            else if (context.hasAttachment() && context.hasAttachmentType('document') && context.attachment.mimeType?.includes('text/plain')) {
                documents = [context.attachment];
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if (documents.length === 0) {
                return context.send('–ú–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
            }
            console.log(documents);
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤
            const promises = documents.map(async (document) => {
                const fileContent = await bot.api.getFile({ file_id: document.fileId });
                const filePath = fileContent.file_path;
                // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                const url = `https://api.telegram.org/file/bot${bot.options.token}/${filePath}`;
                const response = await fetch(url);
                const text = await response.text();
                //console.log(text);
                // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ screen_name –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
                return text.trim().split(/[\s\n]+/);
            });
            console.log(context);
            console.log(promises);
            // –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
            try {
                const usernamesArrays = await Promise.all(promises);
                console.log(usernamesArrays);
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Å—Å–∏–≤—ã usernames –≤ –æ–¥–∏–Ω
                const allUsernames = [].concat(...usernamesArrays);
                context.scene.state.subscribers.push(...allUsernames);
                context.scene.state.subscribers = [...new Set(context.scene.state.subscribers)];
                context.scene.state.subscribers = removeDuplicates(array, context.scene.state.subscribers);
                await deleteMessage(context);
                return context.scene.step.go(context.scene.step.stepId);
            }
            catch (error) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                console.error(error);
            }
        },
        /**
         * @description –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É
         */
        async (context) => {
            const text = `üî§ –ò–º—è —ç–ª–µ–º–µ–Ω—Ç–∞: ${context.scene.state.name}.`;
            if (context.scene.step.firstTime) {
                return sendMessage(context, text, generateKeyboard(context.scene.state.name));
            }
            if (context instanceof CallbackQueryContext) {
                return callbackHandler(context);
            }
            return context.send('–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é.');
        },
        /**
         * @description –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã
         */
        async (context) => {
            const text = `‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É.`;
            if (context.scene.step.firstTime) {
                return sendMessage(context, text, generateKeyboardConfirm(context.scene.state.name));
            }
            if (context instanceof CallbackQueryContext) {
                return callbackHandler(context);
            }
            return context.send('–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é.');
        },
    ],
    /**
     * @description –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤—ã–∑—ã–≤–∞—é—â–∏–π—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å—Ü–µ–Ω—ã
     */
    leaveHandler: async (context) => {
        return console.log('leave');
    }
});
